diff --git a/src/Components/Web.JS/src/Boot.WebAssembly.ts b/src/Components/Web.JS/src/Boot.WebAssembly.ts
index e46702cc4d..28b8ca6782 100644
--- a/src/Components/Web.JS/src/Boot.WebAssembly.ts
+++ b/src/Components/Web.JS/src/Boot.WebAssembly.ts
@@ -17,6 +17,7 @@ import { WebAssemblyStartOptions } from './Platform/WebAssemblyStartOptions';
 import { WebAssemblyComponentAttacher } from './Platform/WebAssemblyComponentAttacher';
 import { discoverComponents, discoverPersistedState, WebAssemblyComponentDescriptor } from './Services/ComponentDescriptorDiscovery';
 import { setDispatchEventMiddleware } from './Rendering/WebRendererInteropMethods';
+import { setNavigationBaseUri } from './Services/NavigationManager';
 import { fetchAndInvokeInitializers } from './JSInitializers/JSInitializers.WebAssembly';
 
 let started = false;
@@ -33,6 +34,11 @@ async function boot(options?: Partial<WebAssemblyStartOptions>): Promise<void> {
     await new Promise(() => {}); // See inAuthRedirectIframe for explanation
   }
 
+  const resourceBaseUri = options?.resourceBaseUri ?? document.baseURI;
+  const resourceFetchCredentialMode = options?.resourceFetchCredentialMode;
+  const appBaseUri = options?.appBaseUri ?? document.baseURI;
+  DotNet.setImportBaseUri(resourceBaseUri);
+
   setDispatchEventMiddleware((browserRendererId, eventHandlerId, continuation) => {
     // It's extremely unusual, but an event can be raised while we're in the middle of synchronously applying a
     // renderbatch. For example, a renderbatch might mutate the DOM in such a way as to cause an <input> to lose
@@ -74,30 +80,37 @@ async function boot(options?: Partial<WebAssemblyStartOptions>): Promise<void> {
   };
 
   // Configure navigation via JS Interop
+  setNavigationBaseUri(appBaseUri);
   const getBaseUri = Blazor._internal.navigationManager.getBaseURI;
   const getLocationHref = Blazor._internal.navigationManager.getLocationHref;
   Blazor._internal.navigationManager.getUnmarshalledBaseURI = () => BINDING.js_string_to_mono_string(getBaseUri());
   Blazor._internal.navigationManager.getUnmarshalledLocationHref = () => BINDING.js_string_to_mono_string(getLocationHref());
 
-  Blazor._internal.navigationManager.listenForNavigationEvents(async (uri: string, state: string | undefined, intercepted: boolean): Promise<void> => {
-    await DotNet.invokeMethodAsync(
-      'Microsoft.AspNetCore.Components.WebAssembly',
-      'NotifyLocationChanged',
-      uri,
-      state,
-      intercepted
-    );
-  }, async (callId: number, uri: string, state: string | undefined, intercepted: boolean): Promise<void> => {
-    const shouldContinueNavigation = await DotNet.invokeMethodAsync<boolean>(
-      'Microsoft.AspNetCore.Components.WebAssembly',
-      'NotifyLocationChangingAsync',
-      uri,
-      state,
-      intercepted
-    );
-
-    Blazor._internal.navigationManager.endLocationChanging(callId, shouldContinueNavigation);
-  });
+  Blazor.addNavigationEventListeners = () => {
+    Blazor._internal.navigationManager.listenForNavigationEvents(async (uri: string, state: string | undefined, intercepted: boolean): Promise<void> => {
+      await DotNet.invokeMethodAsync(
+        'Microsoft.AspNetCore.Components.WebAssembly',
+        'NotifyLocationChanged',
+        uri,
+        state,
+        intercepted
+      );
+    }, async (callId: number, uri: string, state: string | undefined, intercepted: boolean): Promise<void> => {
+      const shouldContinueNavigation = await DotNet.invokeMethodAsync<boolean>(
+        'Microsoft.AspNetCore.Components.WebAssembly',
+        'NotifyLocationChangingAsync',
+        uri,
+        state,
+        intercepted
+      );
+
+      Blazor._internal.navigationManager.endLocationChanging(callId, shouldContinueNavigation);
+    });
+  };
+
+  Blazor.removeNavigationEventListeners = () => Blazor._internal.navigationManager.removeNavigationEventListeners();
+
+  Blazor.addNavigationEventListeners();
 
   const candidateOptions = options ?? {};
 
@@ -105,7 +118,12 @@ async function boot(options?: Partial<WebAssemblyStartOptions>): Promise<void> {
   const environment = candidateOptions.environment;
 
   // Fetch the resources and prepare the Mono runtime
-  const bootConfigPromise = BootConfigResult.initAsync(candidateOptions.loadBootResource, environment);
+  const bootConfigPromise = BootConfigResult.initAsync(
+    resourceBaseUri,
+    resourceFetchCredentialMode,
+    candidateOptions.loadBootResource,
+    environment
+  );
 
   // Leverage the time while we are loading boot.config.json from the network to discover any potentially registered component on
   // the document.
@@ -132,11 +150,16 @@ async function boot(options?: Partial<WebAssemblyStartOptions>): Promise<void> {
   };
 
   const bootConfigResult: BootConfigResult = await bootConfigPromise;
-  const jsInitializer = await fetchAndInvokeInitializers(bootConfigResult.bootConfig, candidateOptions);
+  const jsInitializer = await fetchAndInvokeInitializers(resourceBaseUri, bootConfigResult.bootConfig, candidateOptions);
 
   const [resourceLoader] = await Promise.all([
-    WebAssemblyResourceLoader.initAsync(bootConfigResult.bootConfig, candidateOptions || {}),
-    WebAssemblyConfigLoader.initAsync(bootConfigResult),
+    WebAssemblyResourceLoader.initAsync(
+      bootConfigResult.bootConfig,
+      resourceBaseUri,
+      resourceFetchCredentialMode,
+      candidateOptions || {}
+    ),
+    WebAssemblyConfigLoader.initAsync(bootConfigResult, resourceBaseUri),
   ]);
 
   try {
diff --git a/src/Components/Web.JS/src/GlobalExports.ts b/src/Components/Web.JS/src/GlobalExports.ts
index 4fca849b69..64734c36ca 100644
--- a/src/Components/Web.JS/src/GlobalExports.ts
+++ b/src/Components/Web.JS/src/GlobalExports.ts
@@ -21,6 +21,9 @@ interface IBlazor {
   navigateTo: (uri: string, options: NavigationOptions) => void;
   registerCustomEventType: (eventName: string, options: EventTypeOptions) => void;
 
+  addNavigationEventListeners: () => void;
+  removeNavigationEventListeners: () => void;
+
   disconnect?: () => void;
   reconnect?: (existingConnection?: HubConnection) => Promise<boolean>;
   defaultReconnectionHandler?: DefaultReconnectionHandler;
@@ -73,6 +76,8 @@ interface IBlazor {
 export const Blazor: IBlazor = {
   navigateTo,
   registerCustomEventType,
+  addNavigationEventListeners: () => { /* do nothing, set by boot(). */ },
+  removeNavigationEventListeners: () => { /* do nothing, set by boot(). */ },
   rootComponents: RootComponentsFunctions,
 
   _internal: {
diff --git a/src/Components/Web.JS/src/JSInitializers/JSInitializers.Server.ts b/src/Components/Web.JS/src/JSInitializers/JSInitializers.Server.ts
index 2d5d2aa5bc..06140e8096 100644
--- a/src/Components/Web.JS/src/JSInitializers/JSInitializers.Server.ts
+++ b/src/Components/Web.JS/src/JSInitializers/JSInitializers.Server.ts
@@ -12,7 +12,8 @@ export async function fetchAndInvokeInitializers(options: Partial<CircuitStartOp
   });
 
   const initializers: string[] = await jsInitializersResponse.json();
-  const jsInitializer = new JSInitializer();
+  // Explicitly pass document.baseURI here to preserve original implementation's behavior.
+  const jsInitializer = new JSInitializer(document.baseURI);
   await jsInitializer.importInitializersAsync(initializers, [options]);
   return jsInitializer;
 }
diff --git a/src/Components/Web.JS/src/JSInitializers/JSInitializers.WebAssembly.ts b/src/Components/Web.JS/src/JSInitializers/JSInitializers.WebAssembly.ts
index 4e82a94184..051bfdf3a5 100644
--- a/src/Components/Web.JS/src/JSInitializers/JSInitializers.WebAssembly.ts
+++ b/src/Components/Web.JS/src/JSInitializers/JSInitializers.WebAssembly.ts
@@ -5,9 +5,9 @@ import { BootJsonData } from '../Platform/BootConfig';
 import { WebAssemblyStartOptions } from '../Platform/WebAssemblyStartOptions';
 import { JSInitializer } from './JSInitializers';
 
-export async function fetchAndInvokeInitializers(bootConfig: BootJsonData, options: Partial<WebAssemblyStartOptions>) : Promise<JSInitializer> {
+export async function fetchAndInvokeInitializers(resourceBaseUri: string, bootConfig: BootJsonData, options: Partial<WebAssemblyStartOptions>) : Promise<JSInitializer> {
   const initializers = bootConfig.resources.libraryInitializers;
-  const jsInitializer = new JSInitializer();
+  const jsInitializer = new JSInitializer(resourceBaseUri);
   if (initializers) {
     await jsInitializer.importInitializersAsync(
       Object.keys(initializers),
diff --git a/src/Components/Web.JS/src/JSInitializers/JSInitializers.WebView.ts b/src/Components/Web.JS/src/JSInitializers/JSInitializers.WebView.ts
index 0b46064ef5..b0b0426b09 100644
--- a/src/Components/Web.JS/src/JSInitializers/JSInitializers.WebView.ts
+++ b/src/Components/Web.JS/src/JSInitializers/JSInitializers.WebView.ts
@@ -11,7 +11,8 @@ export async function fetchAndInvokeInitializers() : Promise<JSInitializer> {
   });
 
   const initializers: string[] = await jsInitializersResponse.json();
-  const jsInitializer = new JSInitializer();
+  // Explicitly pass document.baseURI here to preserve original implementation's behavior.
+  const jsInitializer = new JSInitializer(document.baseURI);
   await jsInitializer.importInitializersAsync(initializers, []);
   return jsInitializer;
 }
diff --git a/src/Components/Web.JS/src/JSInitializers/JSInitializers.ts b/src/Components/Web.JS/src/JSInitializers/JSInitializers.ts
index 4cc1b035ee..444544696a 100644
--- a/src/Components/Web.JS/src/JSInitializers/JSInitializers.ts
+++ b/src/Components/Web.JS/src/JSInitializers/JSInitializers.ts
@@ -11,12 +11,15 @@ type BlazorInitializer = { beforeStart: BeforeBlazorStartedCallback, afterStarte
 export class JSInitializer {
   private afterStartedCallbacks: AfterBlazorStartedCallback[] = [];
 
+  constructor(private _resourceBaseUri: string) { }
+
   async importInitializersAsync(initializerFiles: string[], initializerArguments: unknown[]): Promise<void> {
+    const resourceBaseUri = this._resourceBaseUri;
     await Promise.all(initializerFiles.map(f => importAndInvokeInitializer(this, f)));
 
     function adjustPath(path: string): string {
       // This is the same we do in JS interop with the import callback
-      const base = document.baseURI;
+      const base = resourceBaseUri;
       path = base.endsWith('/') ? `${base}${path}` : `${base}/${path}`;
       return path;
     }
diff --git a/src/Components/Web.JS/src/Platform/BootConfig.ts b/src/Components/Web.JS/src/Platform/BootConfig.ts
index 4f14e8fe39..6639217a32 100644
--- a/src/Components/Web.JS/src/Platform/BootConfig.ts
+++ b/src/Components/Web.JS/src/Platform/BootConfig.ts
@@ -9,17 +9,30 @@ export class BootConfigResult {
   private constructor(public bootConfig: BootJsonData, public applicationEnvironment: string) {
   }
 
-  static async initAsync(loadBootResource?: LoadBootResourceCallback, environment?: string): Promise<BootConfigResult> {
+  static async initAsync(
+    resourceBaseUri: string,
+    resourceFetchCredentialMode?: RequestCredentials,
+    loadBootResource?: LoadBootResourceCallback,
+    environment?: string
+  ): Promise<BootConfigResult> {
     const loaderResponse = loadBootResource !== undefined ?
       loadBootResource('manifest', 'blazor.boot.json', '_framework/blazor.boot.json', '') :
-      defaultLoadBlazorBootJson('_framework/blazor.boot.json');
+      defaultLoadBlazorBootJson('_framework/blazor.boot.json', resourceBaseUri, resourceFetchCredentialMode);
 
     let bootConfigResponse: Response;
 
     if (!loaderResponse) {
-      bootConfigResponse = await defaultLoadBlazorBootJson('_framework/blazor.boot.json');
+      bootConfigResponse = await defaultLoadBlazorBootJson(
+        '_framework/blazor.boot.json',
+        resourceBaseUri,
+        resourceFetchCredentialMode
+      );
     } else if (typeof loaderResponse === 'string') {
-      bootConfigResponse = await defaultLoadBlazorBootJson(loaderResponse);
+      bootConfigResponse = await defaultLoadBlazorBootJson(
+        loaderResponse,
+        resourceBaseUri,
+        resourceFetchCredentialMode
+      );
     } else {
       bootConfigResponse = await loaderResponse;
     }
@@ -33,10 +46,15 @@ export class BootConfigResult {
 
     return new BootConfigResult(bootConfig, applicationEnvironment);
 
-    function defaultLoadBlazorBootJson(url: string) : Promise<Response> {
-      return fetch(url, {
+    function defaultLoadBlazorBootJson(
+      url: string,
+      resourceBaseUri: string,
+      resourceFetchCredentialMode?: RequestCredentials
+    ) : Promise<Response> {
+      const resourceUrl = new URL(url, resourceBaseUri).href;
+      return fetch(resourceUrl, {
         method: 'GET',
-        credentials: 'include',
+        credentials: resourceFetchCredentialMode ?? 'include',
         cache: 'no-cache',
       });
     }
diff --git a/src/Components/Web.JS/src/Platform/Mono/MonoDebugger.ts b/src/Components/Web.JS/src/Platform/Mono/MonoDebugger.ts
index c5682e8063..a0752b05f4 100644
--- a/src/Components/Web.JS/src/Platform/Mono/MonoDebugger.ts
+++ b/src/Components/Web.JS/src/Platform/Mono/MonoDebugger.ts
@@ -36,13 +36,13 @@ export function attachDebuggerHotkey(resourceLoader: WebAssemblyResourceLoader):
       } else if (!currentBrowserIsChromeOrEdge) {
         console.error('Currently, only Microsoft Edge (80+), Google Chrome, or Chromium, are supported for debugging.');
       } else {
-        launchDebugger();
+        launchDebugger(resourceLoader.resourceBaseUri);
       }
     }
   });
 }
 
-function launchDebugger() {
+function launchDebugger(resourceBaseUri: string) {
   // The noopener flag is essential, because otherwise Chrome tracks the association with the
   // parent tab, and then when the parent tab pauses in the debugger, the child tab does so
   // too (even if it's since navigated to a different page). This means that the debugger
@@ -51,7 +51,7 @@ function launchDebugger() {
   // We have to construct a link element and simulate a click on it, because the more obvious
   // window.open(..., 'noopener') always opens a new window instead of a new tab.
   const link = document.createElement('a');
-  link.href = `_framework/debug?url=${encodeURIComponent(location.href)}`;
+  link.href = new URL(`_framework/debug?url=${encodeURIComponent(location.href)}`, resourceBaseUri).href;
   link.target = '_blank';
   link.rel = 'noopener noreferrer';
   link.click();
diff --git a/src/Components/Web.JS/src/Platform/Mono/MonoPlatform.ts b/src/Components/Web.JS/src/Platform/Mono/MonoPlatform.ts
index 03c2a5d90f..14d08a87c0 100644
--- a/src/Components/Web.JS/src/Platform/Mono/MonoPlatform.ts
+++ b/src/Components/Web.JS/src/Platform/Mono/MonoPlatform.ts
@@ -175,25 +175,40 @@ async function importDotnetJs(resourceLoader: WebAssemblyResourceLoader): Promis
     .keys(resourceLoader.bootConfig.resources.runtime)
     .filter(n => n.startsWith('dotnet.') && n.endsWith('.js'))[0];
   const dotnetJsContentHash = resourceLoader.bootConfig.resources.runtime[dotnetJsResourceName];
-  let src = `_framework/${dotnetJsResourceName}`;
 
-  // Allow overriding the URI from which the dotnet.*.js file is loaded
+  // Allow overriding the URI from which the dotnet.*.js file is loaded. Since the resource base URI
+  // can come from either the document's base tag or from a custom base URI provided in the Blazor
+  // start options, we apply any URI overrides before assigning to the src attribute of a script
+  // element. This makes it possible to correctly resolve the URL of the dotnet script regardless if
+  // either 1) the base URI is configured via startup options OR 2) the app loads via a URL that
+  // isn't the app's index (i.e., it's a deep client-side link into the app). In the latter case,
+  // the browser would resolve a relative script src URL against the current (client-side) route and
+  // NOT the actual resource base URI of the app.
+  let dotnetJsSrc = `_framework/${dotnetJsResourceName}`;
+
   if (resourceLoader.startOptions.loadBootResource) {
     const resourceType: WebAssemblyBootResourceType = 'dotnetjs';
-    const customSrc = resourceLoader.startOptions.loadBootResource(resourceType, dotnetJsResourceName, src, dotnetJsContentHash);
+    const customSrc = resourceLoader.startOptions.loadBootResource(
+      resourceType,
+      dotnetJsResourceName,
+      dotnetJsSrc,
+      dotnetJsContentHash
+    );
     if (typeof (customSrc) === 'string') {
-      src = customSrc;
+      dotnetJsSrc = customSrc;
     } else if (customSrc) {
       // Since we must load this via a import, it's only valid to supply a URI (and not a Request, say)
       throw new Error(`For a ${resourceType} resource, custom loaders must supply a URI string.`);
     }
+  } else {
+    dotnetJsSrc = new URL(dotnetJsSrc, resourceLoader.resourceBaseUri).href;
   }
 
   // For consistency with WebAssemblyResourceLoader, we only enforce SRI if caching is allowed
   if (resourceLoader.bootConfig.cacheBootResources) {
     const scriptElem = document.createElement('link');
     scriptElem.rel = 'modulepreload';
-    scriptElem.href = src;
+    scriptElem.href = dotnetJsSrc;
     scriptElem.crossOrigin = 'anonymous';
     // it will make dynamic import fail if the hash doesn't match
     // It's currently only validated by chromium browsers
@@ -213,8 +228,7 @@ async function importDotnetJs(resourceLoader: WebAssemblyResourceLoader): Promis
     cjsExportResolve(createDotnetRuntime);
   };
 
-  const absoluteSrc = (new URL(src, document.baseURI)).toString();
-  const { default: createDotnetRuntime } = await import(/* webpackIgnore: true */ absoluteSrc);
+  const { default: createDotnetRuntime } = await import(/* webpackIgnore: true */ dotnetJsSrc);
   if (createDotnetRuntime) {
     // this runs when loaded module was ES6
     delete globalThis.__onDotnetRuntimeLoaded;
@@ -342,8 +356,8 @@ async function createEmscriptenModuleInstance(resourceLoader: WebAssemblyResourc
       // Fetch the assemblies and PDBs in the background, telling Mono to wait until they are loaded
       // Mono requires the assembly filenames to have a '.dll' extension, so supply such names regardless
       // of the extensions in the URLs. This allows loading assemblies with arbitrary filenames.
-      assembliesBeingLoaded.forEach(r => addResourceAsAssembly(r, changeExtension(r.name, '.dll')));
-      pdbsBeingLoaded.forEach(r => addResourceAsAssembly(r, r.name));
+      assembliesBeingLoaded.forEach(r => addResourceAsAssembly(r, changeExtension(r.name, '.dll'), resourceLoader.resourceBaseUri));
+      pdbsBeingLoaded.forEach(r => addResourceAsAssembly(r, r.name, resourceLoader.resourceBaseUri));
 
       Blazor._internal.dotNetCriticalError = (message) => printErr(message || '(null)');
 
@@ -495,7 +509,8 @@ async function createEmscriptenModuleInstance(resourceLoader: WebAssemblyResourc
       runtimeReadyResolve(api);
     };
 
-    async function addResourceAsAssembly(dependency: LoadingResource, loadAsName: string) {
+    async function addResourceAsAssembly(dependency: LoadingResource, loadAsName: string, resourceBaseUri: string) {
+      // XXX: Do we need to have an origin-specific ID?
       const runDependencyId = `blazor:${dependency.name}`;
       Module.addRunDependency(runDependencyId);
 
@@ -509,7 +524,7 @@ async function createEmscriptenModuleInstance(resourceLoader: WebAssemblyResourc
         const heapMemory = new Uint8Array(Module.HEAPU8.buffer, heapAddress as any, data.length);
         heapMemory.set(data);
         MONO.mono_wasm_add_assembly(loadAsName, heapAddress, data.length);
-        MONO.loaded_files.push(toAbsoluteUrl(dependency.url));
+        MONO.loaded_files.push(toAbsoluteUrl(dependency.url, resourceBaseUri));
       } catch (errorInfo) {
         runtimeReadyReject(errorInfo);
         return;
@@ -536,8 +551,8 @@ async function createEmscriptenModuleInstance(resourceLoader: WebAssemblyResourc
 }
 
 const anchorTagForAbsoluteUrlConversions = document.createElement('a');
-function toAbsoluteUrl(possiblyRelativeUrl: string) {
-  anchorTagForAbsoluteUrlConversions.href = possiblyRelativeUrl;
+function toAbsoluteUrl(possiblyRelativeUrl: string, resourceBaseUri: string) {
+  anchorTagForAbsoluteUrlConversions.href = new URL(possiblyRelativeUrl, resourceBaseUri).href;
   return anchorTagForAbsoluteUrlConversions.href;
 }
 
diff --git a/src/Components/Web.JS/src/Platform/WebAssemblyConfigLoader.ts b/src/Components/Web.JS/src/Platform/WebAssemblyConfigLoader.ts
index 38b9ba3ebc..0315e48d52 100644
--- a/src/Components/Web.JS/src/Platform/WebAssemblyConfigLoader.ts
+++ b/src/Components/Web.JS/src/Platform/WebAssemblyConfigLoader.ts
@@ -7,7 +7,11 @@ import { Blazor } from '../GlobalExports';
 import { BINDING } from './Mono/MonoPlatform';
 
 export class WebAssemblyConfigLoader {
-  static async initAsync(bootConfigResult: BootConfigResult): Promise<void> {
+  static async initAsync(
+    bootConfigResult: BootConfigResult,
+    resourceBaseUri: string,
+    resourceFetchCredentialMode?: RequestCredentials
+  ): Promise<void> {
     Blazor._internal.getApplicationEnvironment = () => BINDING.js_string_to_mono_string(bootConfigResult.applicationEnvironment);
 
     const configFiles = await Promise.all((bootConfigResult.bootConfig.config || [])
@@ -21,9 +25,10 @@ export class WebAssemblyConfigLoader {
     };
 
     async function getConfigBytes(file: string): Promise<Uint8Array> {
-      const response = await fetch(file, {
+      const configUrl = new URL(file, resourceBaseUri).href;
+      const response = await fetch(configUrl, {
         method: 'GET',
-        credentials: 'include',
+        credentials: resourceFetchCredentialMode ?? 'include',
         cache: 'no-cache',
       });
 
diff --git a/src/Components/Web.JS/src/Platform/WebAssemblyResourceLoader.ts b/src/Components/Web.JS/src/Platform/WebAssemblyResourceLoader.ts
index f286d79517..fa57282d75 100644
--- a/src/Components/Web.JS/src/Platform/WebAssemblyResourceLoader.ts
+++ b/src/Components/Web.JS/src/Platform/WebAssemblyResourceLoader.ts
@@ -13,12 +13,23 @@ export class WebAssemblyResourceLoader {
 
   private cacheLoads: { [name: string]: LoadLogEntry } = {};
 
-  static async initAsync(bootConfig: BootJsonData, startOptions: Partial<WebAssemblyStartOptions>): Promise<WebAssemblyResourceLoader> {
-    const cache = await getCacheToUseIfEnabled(bootConfig);
-    return new WebAssemblyResourceLoader(bootConfig, cache, startOptions);
+  static async initAsync(
+    bootConfig: BootJsonData,
+    resourceBaseUri: string,
+    resourceFetchCredentialMode: RequestCredentials | undefined,
+    startOptions: Partial<WebAssemblyStartOptions>
+  ): Promise<WebAssemblyResourceLoader> {
+    const cache = await getCacheToUseIfEnabled(bootConfig, startOptions.resourceCacheName);
+    return new WebAssemblyResourceLoader(bootConfig, resourceBaseUri, resourceFetchCredentialMode, cache, startOptions);
   }
 
-  constructor(readonly bootConfig: BootJsonData, readonly cacheIfUsed: Cache | null, readonly startOptions: Partial<WebAssemblyStartOptions>) {
+  constructor(
+    readonly bootConfig: BootJsonData,
+    readonly resourceBaseUri: string,
+    readonly resourceFetchCredentialMode: RequestCredentials | undefined,
+    readonly cacheIfUsed: Cache | null,
+    readonly startOptions: Partial<WebAssemblyStartOptions>
+  ) {
   }
 
   loadResources(resources: ResourceList, url: (name: string) => string, resourceType: WebAssemblyBootResourceType): LoadingResource[] {
@@ -127,9 +138,11 @@ export class WebAssemblyResourceLoader {
     // Note that if cacheBootResources was explicitly disabled, we also bypass hash checking
     // This is to give developers an easy opt-out from the entire caching/validation flow if
     // there's anything they don't like about it.
-    return fetch(url, {
+    const resourceUrl = new URL(url, this.resourceBaseUri).href;
+    return fetch(resourceUrl, {
       cache: networkFetchCacheMode,
       integrity: this.bootConfig.cacheBootResources ? contentHash : undefined,
+      credentials: this.resourceFetchCredentialMode
     });
   }
 
@@ -164,7 +177,7 @@ export class WebAssemblyResourceLoader {
   }
 }
 
-async function getCacheToUseIfEnabled(bootConfig: BootJsonData): Promise<Cache | null> {
+async function getCacheToUseIfEnabled(bootConfig: BootJsonData, customCacheName?: string): Promise<Cache | null> {
   // caches will be undefined if we're running on an insecure origin (secure means https or localhost)
   if (!bootConfig.cacheBootResources || typeof caches === 'undefined') {
     return null;
@@ -181,7 +194,7 @@ async function getCacheToUseIfEnabled(bootConfig: BootJsonData): Promise<Cache |
   // to purge from the cache anything we're not using and don't let it keep growing,
   // since we don't want to be worst offenders for space usage.
   const relativeBaseHref = document.baseURI.substring(document.location.origin.length);
-  const cacheName = `blazor-resources-${relativeBaseHref}`;
+  const cacheName = `blazor-resources-${customCacheName ?? relativeBaseHref}`;
 
   try {
     // There's a Chromium bug we need to be aware of here: the CacheStorage APIs say that when
diff --git a/src/Components/Web.JS/src/Platform/WebAssemblyStartOptions.ts b/src/Components/Web.JS/src/Platform/WebAssemblyStartOptions.ts
index 4c40a349f4..1ae6518777 100644
--- a/src/Components/Web.JS/src/Platform/WebAssemblyStartOptions.ts
+++ b/src/Components/Web.JS/src/Platform/WebAssemblyStartOptions.ts
@@ -22,6 +22,33 @@ export interface WebAssemblyStartOptions {
    * Gets the application culture. This is a name specified in the BCP 47 format. See https://tools.ietf.org/html/bcp47
    */
   applicationCulture?: string;
+
+  /**
+   * Base URI the Blazor application will use for internal navigation and routing purposes. If not
+   * provided, defaults to document.baseURI. This must have a trailing slash.
+   */
+  appBaseUri?: string;
+
+  /**
+   * Base URI from which the Blazor application and its resources are served. If not provided,
+   * defaults to document.baseURI. This must have a trailing slash.
+   */
+  resourceBaseUri?: string;
+
+  /**
+   * Name to use for the resource cache used by the Blazor WASM application. If not provided,
+   * defaults to the path portion of document.baseURI. (n.b., we don't consider the path portion of
+   * the baseUri given in the startup options in most cases that will simply be the root of that
+   * URI's origin, and if a page loads multiple Blazor applications located at the root of different
+   * origins, they would end up using the same resource cache).
+   */
+  resourceCacheName?: string;
+
+  /**
+   * Credential mode to use when fetching resources for the Blazor application. If not provided,
+   * Blazor's defaults will be used instead.
+   */
+  resourceFetchCredentialMode?: RequestCredentials;
 }
 
 // This type doesn't have to align with anything in BootConfig.
diff --git a/src/Components/Web.JS/src/Services/NavigationManager.ts b/src/Components/Web.JS/src/Services/NavigationManager.ts
index c3321da6d9..11b2150dc7 100644
--- a/src/Components/Web.JS/src/Services/NavigationManager.ts
+++ b/src/Components/Web.JS/src/Services/NavigationManager.ts
@@ -18,14 +18,20 @@ let notifyLocationChangingCallback: ((callId: number, uri: string, state: string
 let popStateCallback: ((state: PopStateEvent) => Promise<void> | void) = onBrowserInitiatedPopState;
 let resolveCurrentNavigation: ((shouldContinueNavigation: boolean) => void) | null = null;
 
+let navigationBaseUri: string = document.baseURI;
+export function setNavigationBaseUri(baseUri: string) {
+  navigationBaseUri = baseUri;
+}
+
 // These are the functions we're making available for invocation from .NET
 export const internalFunctions = {
   listenForNavigationEvents,
+  removeNavigationEventListeners,
   enableNavigationInterception,
   setHasLocationChangingListeners,
   endLocationChanging,
   navigateTo: navigateToFromDotNet,
-  getBaseURI: (): string => document.baseURI,
+  getBaseURI: () => navigationBaseUri,
   getLocationHref: (): string => location.href,
 };
 
@@ -45,6 +51,15 @@ function listenForNavigationEvents(
   currentHistoryIndex = history.state?._index ?? 0;
 }
 
+function removeNavigationEventListeners() {
+  if (!hasRegisteredNavigationEventListeners) {
+    return;
+  }
+
+  hasRegisteredNavigationEventListeners = false;
+  window.removeEventListener('popstate', onPopState);
+}
+
 function enableNavigationInterception(): void {
   hasEnabledNavigationInterception = true;
 }
@@ -250,7 +265,7 @@ async function onPopState(state: PopStateEvent) {
 let testAnchor: HTMLAnchorElement;
 export function toAbsoluteUri(relativeUri: string): string {
   testAnchor = testAnchor || document.createElement('a');
-  testAnchor.href = relativeUri;
+  testAnchor.href = new URL(relativeUri, navigationBaseUri).href;
   return testAnchor.href;
 }
 
@@ -287,7 +302,7 @@ function findClosestAnchorAncestorLegacy(element: Element | null, tagName: strin
 }
 
 function isWithinBaseUriSpace(href: string) {
-  const baseUriWithoutTrailingSlash = toBaseUriWithoutTrailingSlash(document.baseURI!);
+  const baseUriWithoutTrailingSlash = toBaseUriWithoutTrailingSlash(navigationBaseUri);
   const nextChar = href.charAt(baseUriWithoutTrailingSlash.length);
 
   return href.startsWith(baseUriWithoutTrailingSlash)
diff --git a/src/JSInterop/Microsoft.JSInterop.JS/src/src/Microsoft.JSInterop.ts b/src/JSInterop/Microsoft.JSInterop.JS/src/src/Microsoft.JSInterop.ts
index 46676d0d6f..fb3bf2adea 100644
--- a/src/JSInterop/Microsoft.JSInterop.JS/src/src/Microsoft.JSInterop.ts
+++ b/src/JSInterop/Microsoft.JSInterop.JS/src/src/Microsoft.JSInterop.ts
@@ -71,7 +71,7 @@ export module DotNet {
       // However since we're the one calling the import keyword, they would be resolved relative to
       // this framework bundle URL. Fix this by providing an absolute URL.
       if (typeof url === "string" && url.startsWith("./")) {
-          url = document.baseURI + url.substr(2);
+          url = importBaseUri + url.substr(2);
       }
 
       return import(/* webpackIgnore: true */ url);
@@ -608,4 +608,9 @@ export module DotNet {
 
       return value;
   }
+
+  let importBaseUri = document.baseURI;
+  export function setImportBaseUri(uri: string) {
+    importBaseUri = uri;
+  }
 }
